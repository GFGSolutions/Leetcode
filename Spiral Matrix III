// User Template For Java

class Solution {
  public int[][] spiralMatrixIII(int rows, int cols, int rStart, int cStart) {
    int[] dr = {0, 1, 0, -1};
    int[] dc = {1, 0, -1, 0};
    int totalCells = rows * cols;
    int[][] result = new int[totalCells][2];
    int r = rStart, c = cStart;
    int direction = 0; 
    int steps = 1;
    int index = 0;
    result[index++] = new int[]{r, c};
    while (index < totalCells) {
      for (int i = 0; i < 2; i++) { 
        for (int j = 0; j < steps; j++) {
          r += dr[direction];
          c += dc[direction];
          if (r >= 0 && r < rows && c >= 0 && c < cols) {
            result[index++] = new int[]{r, c};
            if (index == totalCells) {
              return result;
            }
          }
        }
        direction = (direction + 1) % 4; 
      }
      steps++; 
    }
    return result;
  }
}




// User Template For Python3
class Solution:
    def spiralMatrixIII(self, rows: int, cols: int, rStart: int, cStart: int) -> List[List[int]]:
        directions=[(0,1),(1,0),(0,-1),(-1,0)]
        num_steps=1
        total_cells=rows*cols
        result=[]
        r,c=rStart,cStart
        d=0

        while len(result)<total_cells:
            for _ in range(2):
                for _ in range(num_steps):
                    if 0<=r<rows and 0<=c<cols:
                        result.append([r,c])
                    if len(result)==total_cells:
                        return result
                    r+=directions[d][0]
                    c+=directions[d][1]
                d=(d+1)%4
            num_steps+=1

        return result
