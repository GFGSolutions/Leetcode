// User Template For Java

class Solution {
  public int numMagicSquaresInside(int[][] grid) {
    int n = grid.length;
    int m = grid[0].length;
    if (n < 3 || m < 3) return 0;
    int cnt = 0;
    int[][][] magicSq = {
      {{4, 9, 2}, {3, 5, 7}, {8, 1, 6}},
      {{2, 7, 6}, {9, 5, 1}, {4, 3, 8}},
      {{6, 1, 8}, {7, 5, 3}, {2, 9, 4}},
      {{8, 3, 4}, {1, 5, 9}, {6, 7, 2}},
      {{4, 3, 8}, {9, 5, 1}, {2, 7, 6}},
      {{2, 9, 4}, {7, 5, 3}, {6, 1, 8}},
      {{6, 7, 2}, {1, 5, 9}, {8, 3, 4}},
      {{8, 1, 6}, {3, 5, 7}, {4, 9, 2}}
    };
    for (int rStart = 0; rStart <= n - 3; rStart++) {
      for (int cStart = 0; cStart <= m - 3; cStart++) {
        int[][] subgrid = new int[3][3];
        for (int i = 0; i < 3; i++) {
          for (int j = 0; j < 3; j++) {
            subgrid[i][j] = grid[rStart + i][cStart + j];
          }
        }
        for (int i = 0; i <= 7; i++) {
          if (java.util.Arrays.deepEquals(magicSq[i], subgrid)) {
            cnt++;
          }
        }
      }
    }
    return cnt;
  }
}






// User Template For C++
class Solution {
public:
    static bool isMagic(int i, int j, vector<vector<int>>& grid){
    //    if (grid[i][j] != 5) return 0;

        bitset<10> once; // bitset of size 10 to track digits 1-9
        int rowSum[3] = {0}, colSum[3] = {0};

        for(int a=i-1; a <= i+1; a++) {
            for(int b=j-1; b <=j+1; b++) {
                int x= grid[a][b];
                if (x<1 || x>9) return 0; // invalid number for a magic square
                rowSum[a-i+1] += x;
                colSum[b-j+1] += x;
                once.flip(x);
            }
        }
        // numbers 1-9 are present exactly once
        if (once.count() != 9) return 0;

        // all rows and columns sum to 15
        if (!all_of(rowSum, rowSum+3, [](int sum){ return sum == 15; })) return 0;
        if (!all_of(colSum, colSum+3, [](int sum){ return sum == 15; })) return 0;

        // Check if diagonals sum to 15
        return (grid[i-1][j-1]+grid[i+1][j+1]==10 && grid[i+1][j-1]+grid[i-1][j+1]== 10);
    }

    static int numMagicSquaresInside(vector<vector<int>>& grid) {
        const int r = grid.size(), c = grid[0].size();
        if (r < 3 || c < 3) return 0;

        int cnt = 0;
        for(int i = 1; i < r-1; i++) {
            for(int j = 1; j < c-1; j++) {
                if (grid[i][j]==5) 
                    cnt+=isMagic(i, j, grid);
            }
        }
        return cnt;
    }
};





auto init = []() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return 'c';
}();






// User Template For Python
class Solution:
    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:
        def isMagic(i, j):
            once=[False]*10
            rowSum=[0]*3
            colSum= [0]*3

            for a in range(i-1, i+2):
                for b in range(j-1, j+2):
                    x= grid[a][b]
                    if x < 1 or x > 9: return False
                    rowSum[a-i+1] += x
                    colSum[b-j+1] += x
                    if once[x]: 
                        return False  # it's not unique
                    once[x]=True

            for b in once[1:]: 
                if not b: return False

            for sum in rowSum:
                if sum!=15: return False
            for sum in colSum:
                if sum!=15: return False
            
            return grid[i-1][j-1]+grid[i+1][j+1]==10 and grid[i+1][j-1]+grid[i-1][j+1]==10
        
        r, c = len(grid), len(grid[0])
        if r < 3 or c < 3: 
            return 0

        cnt=0
        for i in range(1, r-1):
            for j in range(1, c-1):
                if grid[i][j] == 5 and isMagic(i, j): 
                    cnt+=1
        return cnt
