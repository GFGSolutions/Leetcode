// User Template For Java

class Solution {
  public List<Integer> postorder(Node root) {
    if (root == null) return new ArrayList<>();
    List<Integer> res = new ArrayList<>();
    dfs(root, res);
    return res;
  }
  private void dfs(Node root, List<Integer> res) {
    for (Node child : root.children) {
      dfs(child, res);
    }
    res.add(root.val);
  }
}





// User Template For C++
class Solution {
public:
    vector<int> postorder(Node* root) {
        // If the root is null, return an empty vector
        if (!root) return {};

        vector<int> res;

        // Define the DFS function
        function<void(Node*)> dfs = [&](Node* node) {
            // Recursively call dfs for each child of the current node
            for (Node* child : node->children) {
                dfs(child);
            }
            // Append the value of the current node to the result vector
            res.push_back(node->val);
        };

        // Start DFS from the root
        dfs(root);

        // Return the result vector containing node values in post-order
        return res;
    }
};




// User Template For Python
class Solution(object):
    def postorder(self, root):
        # If the root is None, return an empty list
        if not root:
            return []

        res = []

        # Define the DFS function
        def dfs(root):
            # Recursively call dfs for each child of the current node
            for x in root.children:
                dfs(x)
            # Append the value of the current node to the result list
            res.append(root.val)

        # Start DFS from the root
        dfs(root)

        # Return the result list containing node values in post-order
        return res
