// User Template For Java

class Solution {
  public int[] nodesBetweenCriticalPoints(ListNode head) {
    ListNode pre = head;
    ListNode cur = head.next;
    int[] ans = {-1, -1};
    int prePosition = -1, curPosition = -1, firstPosition = -1, position = 0;
    while (cur.next != null) {
      if ((cur.val < pre.val && cur.val < cur.next.val) || (cur.val > pre.val && cur.val > cur.next.val)) {
        prePosition = curPosition;
        curPosition = position;
        if (firstPosition == -1) {
          firstPosition = position;
        }
        if (prePosition != -1) {
          if (ans[0] == -1) ans[0] = curPosition - prePosition;
          else ans[0] = Math.min(ans[0], curPosition - prePosition);
          ans[1] = position - firstPosition;
        }
      }
      position++;
      pre = cur;
      cur = cur.next;
    }
    return ans;
  }
}




// User Template For C++
class Solution {
public:
    vector<int> nodesBetweenCriticalPoints(ListNode* head) {
        ListNode* pre = head; 
        ListNode*cur = head -> next;
        vector<int> ans = {-1, -1};
        int prePosition = -1, curPosition = -1, firstPosition = -1, position = 0;
        while(cur -> next != NULL) {
            if((cur -> val < pre -> val && cur -> val < cur -> next -> val) || (cur -> val > pre -> val && cur -> val > cur -> next -> val)) {
                //local
                prePosition = curPosition;
                curPosition = position;
                if(firstPosition == -1) {
                    firstPosition = position;
                }
                if(prePosition != -1) {
                    if(ans[0] == -1) ans[0] = curPosition - prePosition;
                    else ans[0] = min(ans[0], curPosition - prePosition);
                    ans[1] = position - firstPosition;
                }
            }
            position++;
            pre = cur;
            cur = cur -> next;
        }
        return ans;
    }
};




// User Template For Python
class Solution:
    def nodesBetweenCriticalPoints(self, head: Optional[ListNode]) -> List[int]:
        pre = head
        cur = head.next
        ans = [-1, -1]
        prePosition, curPosition,firstPosition, position  = -1, -1, -1, 0

        while cur.next is not None:
            if (cur.val < pre.val and cur.val < cur.next.val) or (cur.val > pre.val and cur.val > cur.next.val):
                # local
                prePosition = curPosition
                curPosition = position
                
                if firstPosition == -1:
                    firstPosition = position
                if prePosition != -1:
                    if ans[0] == -1:
                        ans[0] = curPosition - prePosition
                    else:
                        ans[0] = min(ans[0], curPosition - prePosition)
                    ans[1] = position - firstPosition
            
            position += 1
            pre = cur
            cur = cur.next
        return ans
