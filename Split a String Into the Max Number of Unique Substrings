// User Template For Java

class Solution {
  public int maxUniqueSplit(String s) {
    return backtrack(0, s, new HashSet<>());
  }
  private int backtrack(int start, String s, HashSet<String> seen) {
    if (start == s.length()) {
      return 0; 
    }
    int maxSplits = 0;
    for (int end = start + 1; end <= s.length(); end++) {
      String substring = s.substring(start, end);
      if (!seen.contains(substring)) {
        seen.add(substring); 
        maxSplits = Math.max(maxSplits, 1 + backtrack(end, s, seen));
        seen.remove(substring);
      }
    }
    return maxSplits;
  }
}






// User Template For C++
class Solution {
public:
    int maxUniqueSplit(string s) {
        unordered_set<string> seen;
        return backtrack(0, s, seen);
    }
private:
    int backtrack(int start, const string& s, unordered_set<string>& seen) {
        if (start == s.size()) {
            return 0;
        }
        int maxSplits = 0;
        for (int end = start + 1; end <= s.size(); ++end) {
            string substring = s.substr(start, end - start);
            if (seen.find(substring) == seen.end()) {
                seen.insert(substring);
                maxSplits = max(maxSplits, 1 + backtrack(end, s, seen));
                seen.erase(substring);
            }
        }
        return maxSplits;
    }
};





// User Template For Python3
class Solution:
    def maxUniqueSplit(self, s: str) -> int:
        def backtrack(start, seen):
            if start == len(s):
                return 0
            max_splits = 0
            for end in range(start + 1, len(s) + 1):
                substring = s[start:end]
                if substring not in seen:
                    seen.add(substring)
                    max_splits = max(max_splits, 1 + backtrack(end, seen))
                    seen.remove(substring)
            return max_splits
        return backtrack(0, set())
