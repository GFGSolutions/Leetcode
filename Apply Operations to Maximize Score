// User template for Java

class Solution {
  static final int MOD = 1000000007;
  public int maximumScore(List<Integer> nums, int k) {
    int n = nums.size();
    int upper = Collections.max(nums) + 1;
    boolean[] prime = new boolean[upper];
    int[] primeScore = new int[upper];
    Arrays.fill(prime, true);
    prime[0] = prime[1] = false;
    for (int i = 2; i < upper; i++) {
      if (prime[i]) {
        for (int j = i; j < upper; j += i) {
          primeScore[j]++;
          prime[j] = false;
        } } }
    int[] nextGreaterElement = new int[n];
    Arrays.fill(nextGreaterElement, n);
    Stack<Integer> s = new Stack<>();
    for (int i = n - 1; i >= 0; i--) {
      while (!s.empty() && primeScore[nums.get(i)] >= primeScore[nums.get(s.peek())]) {
        s.pop(); }
      nextGreaterElement[i] = s.empty() ? n : s.peek();
      s.push(i); }
    int[] prevGreaterOrEqualElement = new int[n];
    Arrays.fill(prevGreaterOrEqualElement, -1);
    s = new Stack<>();
    for (int i = 0; i < n; i++) {
      while (!s.empty() && primeScore[nums.get(i)] > primeScore[nums.get(s.peek())]) {
        s.pop(); }
      prevGreaterOrEqualElement[i] = s.empty() ? -1 : s.peek();
      s.push(i); }
    int res = 1;
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = nums.get(i);
      tuples[i][1] = i; }
    Arrays.sort(tuples, new Comparator<int[]>() {
      public int compare(int[] a, int[] b) {
        return b[0] - a[0];
      }
    });
    for (int i = 0; i < n; i++) {
      int num = tuples[i][0];
      int idx = tuples[i][1];
      int operations = Math.min((idx - prevGreaterOrEqualElement[idx]) * (nextGreaterElement[idx] - idx), k);
      res = (int)((1L * res * pow(num, operations)) % MOD);
      k -= operations;
      if (k == 0) {
        return res; } }
    return res;}
  public int pow(int x, int n) {
    int res = 1;
    while (n > 0) {
      if (n % 2 == 1) {
        res = (int)((1L * res * x) % MOD); }
      x = (int)((1L * x * x) % MOD);
      n /= 2;
    }
    return res;
  }
}
