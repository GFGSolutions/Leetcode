// User Template For Java

class Solution {
  public int maximumGain(String s, int x, int y) {
    int aCount = 0;
    int bCount = 0;
    int lesser = Math.min(x, y);
    int result = 0;
    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);
      if (c > 'b') {
        result += Math.min(aCount, bCount) * lesser;
        aCount = 0;
        bCount = 0;
      } else if (c == 'a') {
        if (x < y && bCount > 0) {
          bCount--;
          result += y;
        } else {
          aCount++;
        }
      } else {
        if (x > y && aCount > 0) {
          aCount--;
          result += x;
        } else {
          bCount++;
        };
      }
    }
    result += Math.min(aCount, bCount) * lesser;
    return result;
  }
}




// User Template For C++
class Solution {
public:
    int maximumGain(string s, int x, int y) {
        int aCount = 0;
        int bCount = 0;
        int lesser = min(x, y);
        int result = 0;

        for (char c : s) {
            if (c > 'b') {
                result += min(aCount, bCount) * lesser;
                aCount = 0;
                bCount = 0;
            } else if (c == 'a') {
                if (x < y && bCount > 0) {
                    bCount--;
                    result += y;
                } else {
                    aCount++;
                }
            } else {
                if (x > y && aCount > 0) {
                    aCount--;
                    result += x;
                } else {
                    bCount++;
                }
            }
        }

        result += min(aCount, bCount) * lesser;
        return result;
    }
};






// User Template For Python
class Solution(object):
    def maximumGain(self, s, x, y):
        a_count = 0
        b_count = 0
        lesser = min(x, y)
        result = 0

        for c in s:
            if c > 'b':
                result += min(a_count, b_count) * lesser
                a_count = 0
                b_count = 0
            elif c == 'a':
                if x < y and b_count > 0:
                    b_count -= 1
                    result += y
                else:
                    a_count += 1
            elif c == 'b':
                if x > y and a_count > 0:
                    a_count -= 1
                    result += x
                else:
                    b_count += 1

        result += min(a_count, b_count) * lesser
        return result
        




