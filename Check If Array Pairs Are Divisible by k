// User Template For Java

class Solution {
  public boolean canArrange(int[] arr, int k) {
    int [] freq = new int[k];
    for(int num: arr){
      int rem = num % k;
      if(rem < 0){
        rem = rem + k;
      }
      freq[rem]++;
    }
    if(freq[0] % 2 != 0){
      return false;
    }
    for(int i = 1;i <= k / 2;i++){
      if(freq[i] != freq[k-i]) {
        return false;
      }
    }
    return true;
  }
}





// User Template For C++
class Solution {
public:
    bool canArrange(vector<int>& arr, int k) {
        vector<int> freq(k, 0);
        for (int num : arr) {
            int rem = num % k;
            if (rem < 0) {
                rem += k;
            }
            freq[rem]++;
        }
        
        if (freq[0] % 2 != 0) {
            return false;
        }
        
        for (int i = 1; i <= k / 2; i++) {
            if (freq[i] != freq[k - i]) {
                return false;
            }
        }
        
        return true;
    }
};




// User Template For Python
class Solution(object):
    def canArrange(self, arr, k):
        freq = [0] * k
        for num in arr:
            rem = num % k
            if rem < 0:
                rem += k
            freq[rem] += 1
        
        if freq[0] % 2 != 0:
            return False
        
        for i in range(1, (k // 2) + 1):
            if freq[i] != freq[k - i]:
                return False
        
        return True
        
