// User Template For Java

class Solution {
  public int findMinDifference(List<String> timePoints) {
    int[] minutes = new int[timePoints.size()];
    for (int i = 0; i < timePoints.size(); i++) {
      String time = timePoints.get(i);
      int h = Integer.parseInt(time.substring(0, 2));
      int m = Integer.parseInt(time.substring(3));
      minutes[i] = h * 60 + m; }
    Arrays.sort(minutes);
    int ans = Integer.MAX_VALUE;
    for (int i = 0; i < minutes.length - 1; i++) {
      ans = Math.min(ans, minutes[i + 1] - minutes[i]);}
    return Math.min(
      ans,
      24 * 60 - minutes[minutes.length - 1] + minutes[0]
    );
  }
}





// User Template For C++
class Solution {
public:
    int findMinDifference(vector<string>& timePoints) {
        vector<int> minutes(timePoints.size());
        
        // Convert times to minutes
        for (int i = 0; i < timePoints.size(); ++i) {
            int h = stoi(timePoints[i].substr(0, 2));
            int m = stoi(timePoints[i].substr(3));
            minutes[i] = h * 60 + m;
        }

        // Sort times in ascending order
        sort(minutes.begin(), minutes.end());

        // Find minimum difference across adjacent elements
        int minDiff = INT_MAX;
        for (int i = 0; i < minutes.size() - 1; ++i) {
            minDiff = min(minDiff, minutes[i + 1] - minutes[i]);
        }

        // Consider the circular difference between last and first element
        minDiff = min(minDiff, 24 * 60 - minutes.back() + minutes.front());

        return minDiff;
    }
};




// User Template For Python
class Solution(object):
    def findMinDifference(self, timePoints):
        # Convert times to minutes
        minutes = []
        for time in timePoints:
            h, m = map(int, time.split(':'))
            minutes.append(h * 60 + m)
        
        # Sort times in ascending order
        minutes.sort()
        
        # Find minimum difference across adjacent elements
        min_diff = float('inf')
        for i in range(len(minutes) - 1):
            min_diff = min(min_diff, minutes[i + 1] - minutes[i])
        
        # Consider the circular difference between last and first element
        min_diff = min(min_diff, 24 * 60 - minutes[-1] + minutes[0])
        
        return min_diff
        

