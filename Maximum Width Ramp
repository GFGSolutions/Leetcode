// User Template For Java

class Solution {
  public int maxWidthRamp(int[] nums) {
    int n = nums.length;
    Stack<Integer> stack = new Stack<>();
    for (int i = 0; i < n; ++i) {
      if (stack.isEmpty() || nums[stack.peek()] > nums[i]) {
        stack.push(i);
      }
    }
    int maxWidth = 0;
    for (int j = n - 1; j >= 0; --j) {
      while (!stack.isEmpty() && nums[stack.peek()] <= nums[j]) {
        maxWidth = Math.max(maxWidth, j - stack.pop());
      }
    }
    return maxWidth;
  }
}





// User Template For C++
class Solution {
public:
    int maxWidthRamp(vector<int>& nums) {
        int n = nums.size();
        stack<int> s;
        
        // Step 1: Build a decreasing stack of indices
        for (int i = 0; i < n; ++i) {
            if (s.empty() || nums[s.top()] > nums[i]) {
                s.push(i);
            }
        }
        
        int maxWidth = 0;
        
        // Step 2: Traverse from the end and find maximum width ramp
        for (int j = n - 1; j >= 0; --j) {
            while (!s.empty() && nums[s.top()] <= nums[j]) {
                maxWidth = max(maxWidth, j - s.top());
                s.pop();
            }
        }
        
        return maxWidth;
    }
};




// User Template For Python
class Solution:
    def maxWidthRamp(self, nums: List[int]) -> int:
        n = len(nums)
        stack = []
        
        # Step 1: Build a decreasing stack of indices
        for i in range(n):
            if not stack or nums[stack[-1]] > nums[i]:
                stack.append(i)
        
        maxWidth = 0
        
        # Step 2: Traverse from the end and find maximum width ramp
        for j in range(n - 1, -1, -1):
            while stack and nums[stack[-1]] <= nums[j]:
                maxWidth = max(maxWidth, j - stack.pop())
        
        return maxWidth
