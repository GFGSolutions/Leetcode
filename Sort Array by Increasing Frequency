// User Template For Java

class Solution {
  public int[] frequencySort(int[] nums) {
  Map<Integer, Integer> res = new HashMap<>();  
  Arrays.stream(nums).forEach(n -> res.put(n, res.getOrDefault(n, 0) + 1));
  return Arrays.stream(nums).boxed()
      .sorted((a,b) -> res.get(a) != res.get(b) ? res.get(a) - res.get(b) : b - a)
      .mapToInt(n -> n)
      .toArray();
  }
}





// User Template For C++
class Solution {
public:
    vector<int> frequencySort(vector<int>& nums) {
        unordered_map<int, int> frequencyMap;
        for (int n : nums) {
            frequencyMap[n]++;
        }
        sort(nums.begin(), nums.end(), [&](int a, int b) {
            if (frequencyMap[a] != frequencyMap[b]) {
                return frequencyMap[a] < frequencyMap[b];
            }
            return a > b;
        });
        return nums;
    }
};





// User Template For Python3
from collections import Counter

class Solution:
    def frequencySort(self, nums):
        frequency_map = Counter(nums)

        nums.sort(key=lambda x: (frequency_map[x], -x))

        return nums
