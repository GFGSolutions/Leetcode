// User Template For Java

class Solution {
  String[] tens = {"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
  String[] ones = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven",
          "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
  public String numberToWords(int num) {
    if (num == 0)
      return "Zero";
    return helper(num).trim();
  }
  private String helper(int num) {
    StringBuilder sb=new StringBuilder();
    if (num >= 1000000000) {
      sb.append(helper(num / 1000000000)).append(" Billion ").append( helper(num % 1000000000));
    } else if (num >= 1000000) {
      sb.append(helper(num / 1000000)).append(" Million ").append( helper(num % 1000000));
    }else if (num >= 1000) {
      sb.append(helper(num / 1000)).append(" Thousand ").append( helper(num % 1000));
    }else if (num >= 100) {
      sb.append(helper(num / 100)).append(" Hundred ").append( helper(num % 100));
    }else if (num >= 20) {
      sb.append(tens[num / 10]).append(" ").append( helper(num % 10));
    } else {
      sb.append(ones[num]);
    }
    return sb.toString().trim();
  }
}





// User Template For C++
class Solution {
public:
    string numberToWords(int num) {
        if (num == 0) return "Zero";

        unordered_map<int, string> units = {
            {1, "One"}, {2, "Two"}, {3, "Three"}, {4, "Four"},
            {5, "Five"}, {6, "Six"}, {7, "Seven"}, {8, "Eight"},
            {9, "Nine"}, {10, "Ten"}, {11, "Eleven"}, {12, "Twelve"},
            {13, "Thirteen"}, {14, "Fourteen"}, {15, "Fifteen"},
            {16, "Sixteen"}, {17, "Seventeen"}, {18, "Eighteen"},
            {19, "Nineteen"}
        };

        unordered_map<int, string> tens = {
            {2, "Twenty"}, {3, "Thirty"}, {4, "Forty"},
            {5, "Fifty"}, {6, "Sixty"}, {7, "Seventy"},
            {8, "Eighty"}, {9, "Ninety"}
        };

        auto getHundred = [&](int num) {
            string str = "";
            if (num >= 100) {
                int n = num / 100;
                str += " " + units[n] + " Hundred";
                num %= 100;
            }

            if (num >= 20) {
                int n = num / 10;
                str += " " + tens[n];
                num %= 10;
            }

            if (num > 0) {
                str += " " + units[num];
            }

            return str;
        };

        string answer = "";
        if (num >= 1e9) {
            int n = num / 1e9;
            answer += getHundred(n) + " Billion";
            num = num % 1000000000;
        }

        if (num >= 1e6) {
            int n = num / 1e6;
            answer += getHundred(n) + " Million";
            num = num % 1000000;
        }

        if (num >= 1e3) {
            int n = num / 1e3;
            answer += getHundred(n) + " Thousand";
            num = num % 1000;
        }

        answer += getHundred(num);
        return answer.substr(1);
    }
};







// User Template For Python
class Solution(object):
    def numberToWords(self, num):
        to19 = "One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen Fourteen Fifteen Sixteen Seventeen Eighteen Nineteen".split()
        tens = 'Twenty Thirty Forty Fifty Sixty Seventy Eighty Ninety'.split()

        def words(n):
            if n < 20:
                return to19[n - 1 : n]
            if n < 100:
                return [tens[n / 10 - 2]] + words(n % 10)
            if n < 1000:
                return [to19[n / 100 - 1]] + ['Hundred'] + words(n % 100)
            for p, w in enumerate(('Thousand', 'Million', 'Billion'), 1):
                if n < 1000 ** (p + 1):
                    return words(n / 1000 ** p) + [w] + words(n % 1000 ** p)
        
        return ' '.join(words(num)) or 'Zero'
