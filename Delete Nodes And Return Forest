// User Template For Java

class Solution {
  private boolean[] set = new boolean[1001];
  private List<TreeNode> res;
  private TreeNode dfs(TreeNode root, boolean flag){
    if (root == null) return root;
    root.left = dfs(root.left, set[root.val]);
    root.right = dfs(root.right, set[root.val]);
    if (!set[root.val] && flag) res.add(root);
    return set[root.val] ? null : root;
  }
  public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
    res = new ArrayList<>();
    for (int n : to_delete)
      set[n] = true;
    dfs(root, true);
    return res;
  }
}





// User Template For C++
class Solution {
private:
    bool set[1001] = {};
    void dfs(TreeNode* &root, bool flag, vector<TreeNode*>& res){
        if (root == nullptr) return;
        dfs(root->left, set[root->val], res);
        dfs(root->right, set[root->val], res);
        if (!set[root->val] && flag) res.push_back(root);
        if (set[root->val]) root = nullptr;
    }
public:
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        vector<TreeNode*> res;
        for (int num : to_delete)
            set[num] = true;
        dfs(root, true, res);
        return res;
    }
};





// User Template For Python
class Solution:
    def delNodes(self, root: Optional[TreeNode], to_delete: List[int]) -> List[TreeNode]:
        s = set(to_delete)
        res = []
        def dfs(root, flag):
            if not root: return None
            toDelete = (root.val in s)
            root.left = dfs(root.left, toDelete)
            root.right = dfs(root.right, toDelete)
            if not toDelete and flag: res.append(root)
            return None if toDelete else root
        dfs(root, True)
        return res
        
