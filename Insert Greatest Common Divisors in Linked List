// User Template For Java

class Solution {
  public ListNode insertGreatestCommonDivisors(ListNode head) {
    if (head.next == null) return head;
    ListNode node1 = head;
    ListNode node2 = head.next;
    while (node2 != null) {
      int gcdValue = calculateGCD(node1.val, node2.val);
      ListNode gcdNode = new ListNode(gcdValue);
      node1.next = gcdNode;
      gcdNode.next = node2;
      node1 = node2;
      node2 = node2.next;
    }
    return head;
  }
  private int calculateGCD(int a, int b) {
    while (b != 0) {
      int temp = b;
      b = a % b;
      a = temp;
    }
    return a;
  }
}





// User Template For C++
class Solution {
public:
    ListNode* insertGreatestCommonDivisors(ListNode* head) {
        if (head == nullptr || head->next == nullptr) return head;

        ListNode* node1 = head;
        ListNode* node2 = head->next;

        while (node2 != nullptr) {
            int gcdValue = calculateGCD(node1->val, node2->val);
            ListNode* gcdNode = new ListNode(gcdValue);

            // Insert gcdNode between node1 and node2
            node1->next = gcdNode;
            gcdNode->next = node2;

            // Move to the next pair of nodes
            node1 = node2;
            node2 = node2->next;
        }

        return head;
    }

private:
    int calculateGCD(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
};




// User Template For Python
    def insertGreatestCommonDivisors(self, head):
        if not head or not head.next:
            return head

        def gcd(a, b):
            while b:
                a, b = b, a % b
            return a

        node1 = head
        while node1.next:
            node2 = node1.next
            gcd_value = gcd(node1.val, node2.val)
            gcd_node = ListNode(gcd_value)
            node1.next = gcd_node
            gcd_node.next = node2
            node1 = node2

        return head
