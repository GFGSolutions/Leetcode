// User Template For Java

class Solution {
  public int maximumSwap(int num) {
    char[] numArr = Integer.toString(num).toCharArray();
    int n = numArr.length;
    int[] last = new int[10];
    for (int i = 0; i < n; i++) {
      last[numArr[i] - '0'] = i;
    }
    for (int i = 0; i < n; i++) {
      for (int d = 9; d > numArr[i] - '0'; d--) {
        if (last[d] > i) {
          char temp = numArr[i];
          numArr[i] = numArr[last[d]];
          numArr[last[d]] = temp;
          return Integer.parseInt(new String(numArr));
        }
      }
    }
    return num;
  }
}





// User Template For C++
class Solution {
public:
    int maximumSwap(int num) {
        // Convert the number to a string for easier digit manipulation
        string numStr = to_string(num);
        int n = numStr.size();
        
        // Store the last occurrence of each digit (0-9)
        vector<int> last(10, -1);
        for (int i = 0; i < n; ++i) {
            last[numStr[i] - '0'] = i;
        }
        
        // Traverse each digit from left to right
        for (int i = 0; i < n; ++i) {
            // Check if there's a larger digit appearing later
            for (int d = 9; d > numStr[i] - '0'; --d) {
                if (last[d] > i) {
                    // Swap the current digit with the larger one
                    swap(numStr[i], numStr[last[d]]);
                    return stoi(numStr); // Convert back to integer and return
                }
            }
        }
        
        // If no swap was made, return the original number
        return num;
    }
};




// User Template For Python
class Solution:
    def maximumSwap(self, num: int) -> int:
        # Convert the number to a list of characters for easy manipulation
        num_list = list(str(num))
        
        # Track the last occurrence of each digit (0-9)
        last = {int(d): i for i, d in enumerate(num_list)}
        
        # Traverse the number from left to right
        for i, digit in enumerate(num_list):
            # Check for a larger digit to swap
            for d in range(9, int(digit), -1):
                if last.get(d, -1) > i:
                    # Swap and return the new number
                    num_list[i], num_list[last[d]] = num_list[last[d]], num_list[i]
                    return int(''.join(num_list))
        
        # If no swap occurred, return the original number
        return num
