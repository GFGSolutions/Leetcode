// User Template For Java

public class Solution {
  public int robotSim(int[] commands, int[][] obstacles) {
    Set<String> obs = new HashSet<>();
    for (int[] obstacle : obstacles) {
      obs.add(obstacle[0] + "," + obstacle[1]); }
    int[][] directionVectors = {
      {0, 1}, {1, 0}, {0, -1}, {-1, 0} };
    int[][] dirChangeMap = {
      {3, 1}, {0, 2}, {1, 3}, {2, 0} };
    int currDirection = 0;
    int x = 0, y = 0;
    int maxDist = 0;
    for (int command : commands) {
      if (command > 0) {
        int dx = directionVectors[currDirection][0];
        int dy = directionVectors[currDirection][1];
        for (int i = 0; i < command; i++) {
          int nextX = x + dx;
          int nextY = y + dy;
          if (obs.contains(nextX + "," + nextY)) {
            break; }
          x = nextX;
          y = nextY; }
        maxDist = Math.max(maxDist, x * x + y * y);
      } else {
        currDirection = dirChangeMap[currDirection][command == -1 ? 1 : 0];
      }
    }
    return maxDist;
  }
}





// User Template For C++
class Solution {
public:
    int robotSim(std::vector<int>& commands, std::vector<std::vector<int>>& obstacles) {
        std::unordered_set<std::string> obs;
        for (const auto& obstacle : obstacles) {
            obs.insert(std::to_string(obstacle[0]) + "," + std::to_string(obstacle[1]));
        }
        std::vector<std::vector<int>> directionVectors = {
            {0, 1}, {1, 0}, {0, -1}, {-1, 0}
        };
        std::vector<std::vector<int>> dirChangeMap = {
            {3, 1}, {0, 2}, {1, 3}, {2, 0}
        };
        int currDirection = 0; 
        int x = 0, y = 0;
        int maxDist = 0;
        for (int command : commands) {
            if (command > 0) {
                int dx = directionVectors[currDirection][0];
                int dy = directionVectors[currDirection][1];
                for (int i = 0; i < command; i++) {
                    int nextX = x + dx;
                    int nextY = y + dy;
                    if (obs.find(std::to_string(nextX) + "," + std::to_string(nextY)) != obs.end()) {
                        break;
                    }
                    x = nextX;
                    y = nextY;
                }
                maxDist = std::max(maxDist, x * x + y * y);
            } else {
                currDirection = dirChangeMap[currDirection][command == -1 ? 1 : 0];
            }
        }
        return maxDist;
    }
};





// User Template For Python
class Solution:
    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:
        obs = set(map(tuple, obstacles))
        direction_vectors = {'N': (0, 1), 'E': (1, 0), 'S': (0, -1), 'W': (-1, 0)}
        dirChangeMap = {"E": ["N", "S"], "N": ["W", "E"], "W": ["S", "N"], "S": ["E", "W"]}
        currDirection = "N"
        currPos = [0, 0]
        maxDist = 0
        for d in commands:
            if d > 0:
                dx, dy = direction_vectors[currDirection]
                for _ in range(d):
                    nextX, nextY = currPos[0] + dx, currPos[1] + dy
                    if (nextX, nextY) in obs:
                        break
                    currPos = [nextX, nextY]
                maxDist = max(maxDist, currPos[0]**2 + currPos[1]**2)
            else:
                currDirection = dirChangeMap[currDirection][d]
        return maxDist
