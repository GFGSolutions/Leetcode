// User Template For Java

class Solution {
  public List<Integer> survivedRobotsHealths(
    int[] positions,
    int[] healths,
    String directions
  ) {
    int n = positions.length;
    Integer[] indices = new Integer[n];
    List<Integer> result = new ArrayList<>();
    Stack<Integer> stack = new Stack<>();
    for (int index = 0; index < n; ++index) {
      indices[index] = index;
    }
    Arrays.sort(
      indices,
      (lhs, rhs) -> Integer.compare(positions[lhs], positions[rhs])
    );
    for (int currentIndex : indices) {
      if (directions.charAt(currentIndex) == 'R') {
        stack.push(currentIndex);
      } else {
        while (!stack.isEmpty() && healths[currentIndex] > 0) {
          int topIndex = stack.pop();
          if (healths[topIndex] > healths[currentIndex]) {
            healths[topIndex] -= 1;
            healths[currentIndex] = 0;
            stack.push(topIndex);
          } else if (healths[topIndex] < healths[currentIndex]) {
            healths[currentIndex] -= 1;
            healths[topIndex] = 0;
          } else {
            healths[currentIndex] = 0;
            healths[topIndex] = 0;
          }
        }
      }
    }
    for (int index = 0; index < n; ++index) {
      if (healths[index] > 0) {
        result.add(healths[index]);
      }
    }
    return result;
  }
}




// User Template For C++
class Solution {
public:
    vector<int> survivedRobotsHealths(vector<int>& positions,
                                      vector<int>& healths, string directions) {
        int n = positions.size();
        vector<int> indices(n), result;
        stack<int> stack;

        for (int index = 0; index < n; ++index) {
            indices[index] = index;
        }

        sort(indices.begin(), indices.end(),
             [&](int lhs, int rhs) { return positions[lhs] < positions[rhs]; });

        for (int currentIndex : indices) {
            // Add right-moving robots to the stack
            if (directions[currentIndex] == 'R') {
                stack.push(currentIndex);
            } else {
                while (!stack.empty() && healths[currentIndex] > 0) {
                    // Pop the top robot from the stack for collision check
                    int topIndex = stack.top();
                    stack.pop();

                    // Top robot survives, current robot is destroyed
                    if (healths[topIndex] > healths[currentIndex]) {
                        healths[topIndex] -= 1;
                        healths[currentIndex] = 0;
                        stack.push(topIndex);
                    } else if (healths[topIndex] < healths[currentIndex]) {
                        // Current robot survives, top robot is destroyed
                        healths[currentIndex] -= 1;
                        healths[topIndex] = 0;
                    } else {
                        // Both robots are destroyed
                        healths[currentIndex] = 0;
                        healths[topIndex] = 0;
                    }
                }
            }
        }

        // Collect surviving robots
        for (int index = 0; index < n; ++index) {
            if (healths[index] > 0) {
                result.push_back(healths[index]);
            }
        }
        return result;
    }
};





// User Template For Python
class Solution:
    def survivedRobotsHealths(self, positions, healths, directions):
        n = len(positions)
        indices = list(range(n))
        result = []
        stack = deque()

        # Sort indices based on their positions
        indices.sort(key=lambda x: positions[x])

        for current_index in indices:
            # Add right-moving robots to the stack
            if directions[current_index] == "R":
                stack.append(current_index)
            else:
                while stack and healths[current_index] > 0:
                    # Pop the top robot from the stack for collision check
                    top_index = stack.pop()

                    if healths[top_index] > healths[current_index]:
                        # Top robot survives, current robot is destroyed
                        healths[top_index] -= 1
                        healths[current_index] = 0
                        stack.append(top_index)
                    elif healths[top_index] < healths[current_index]:
                        # Current robot survives, top robot is destroyed
                        healths[current_index] -= 1
                        healths[top_index] = 0
                    else:
                        # Both robots are destroyed
                        healths[current_index] = 0
                        healths[top_index] = 0

        # Collect surviving robots
        for index in range(n):
            if healths[index] > 0:
                result.append(healths[index])

        return result
