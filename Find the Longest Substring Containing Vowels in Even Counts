// User Template For Java

class Solution {
  public int findTheLongestSubstring(String s) {
    int[] mapy = new int[32];
    Arrays.fill(mapy, -2);
    mapy[0] = -1;
    int maxLen = 0;
    int mask = 0;
    for (int i = 0; i < s.length(); i++) {
      char ch = s.charAt(i);
      switch (ch) {
        case 'a':
          mask ^= 1;
          break;
        case 'e':
          mask ^= 2;
          break;
        case 'i':
          mask ^= 4;
          break;
        case 'o':
          mask ^= 8;
          break;
        case 'u':
          mask ^= 16;
          break; }
      int prev = mapy[mask];
      if (prev == -2) {
        mapy[mask] = i;
      } else {
        maxLen = Math.max(maxLen, i - prev);}}
    return maxLen;
  }
}



// User Template For C++
class Solution {
public:
    int findTheLongestSubstring(string s) {
        vector<int> mapy(32, -2);
        mapy[0] = -1;

        int maxLen = 0;
        int mask = 0;

        for (int i = 0; i < s.size(); ++i) {
            char ch = s[i];

            switch (ch) {
                case 'a':
                    mask ^= 1;
                    break;
                case 'e':
                    mask ^= 2;
                    break;
                case 'i':
                    mask ^= 4;
                    break;
                case 'o':
                    mask ^= 8;
                    break;
                case 'u':
                    mask ^= 16;
                    break;
            }

            int prev = mapy[mask];
            if (prev == -2) {
                mapy[mask] = i;
            } else {
                maxLen = max(maxLen, i - prev);
            }
        }

        return maxLen;
    }
};





// User Template For Python
class Solution:
    def findTheLongestSubstring(self, s: str) -> int:
        mapy = [-2] * 32
        mapy[0] = -1

        max_len = 0
        mask = 0

        for i, char in enumerate(s):
            if char == 'a':
                mask ^= 1
            elif char == 'e':
                mask ^= 2
            elif char == 'i':
                mask ^= 4
            elif char == 'o':
                mask ^= 8
            elif char == 'u':
                mask ^= 16

            prev = mapy[mask]
            if prev == -2:
                mapy[mask] = i
            else:
                max_len = max(max_len, i - prev)

        return max_len
