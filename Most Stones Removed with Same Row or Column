// User Template For Java

class Solution {
  private void dfs(int node, List<List<Integer>> adj, Set<Integer> visited) {
    visited.add(node);
    for (int neighbor : adj.get(node)) {
      if (!visited.contains(neighbor)) {
        dfs(neighbor, adj, visited);
      }
    }
  }
  public int removeStones(int[][] stones) {
    int n = stones.length;
    List<List<Integer>> adj = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      adj.add(new ArrayList<>()); }
    for (int i = 0; i < n; i++) {
      for (int j = i + 1; j < n; j++) {
        if (stones[i][0] == stones[j][0] || stones[i][1] == stones[j][1]) {
          adj.get(i).add(j);
          adj.get(j).add(i);
        }
      }
    }
    Set<Integer> visited = new HashSet<>();
    int numComponents = 0;
    for (int i = 0; i < n; i++) {
      if (!visited.contains(i)) {
        dfs(i, adj, visited);
        numComponents++;
      }
    }
    return n - numComponents;
  }
}




// User Template For C++
class Solution {
public:
    void dfs(int node, vector<vector<int>>& adj, unordered_set<int>& visited) {
        visited.insert(node);
        for (int neighbor : adj[node]) {
            if (visited.find(neighbor) == visited.end()) {
                dfs(neighbor, adj, visited);
            }
        }
    }
    
    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size();
        vector<vector<int>> adj(n);  // adjacency list

        // Build the graph
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (stones[i][0] == stones[j][0] || stones[i][1] == stones[j][1]) {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }

        unordered_set<int> visited;
        int numComponents = 0;

        // Find the number of connected components
        for (int i = 0; i < n; ++i) {
            if (visited.find(i) == visited.end()) {
                dfs(i, adj, visited);
                numComponents++;
            }
        }

        return n - numComponents;
    }
};





// User Template For Python
class Solution:
    def dfs(self, node, adj, visited):
        visited.add(node)
        for neighbor in adj[node]:
            if neighbor not in visited:
                self.dfs(neighbor, adj, visited)
    
    def removeStones(self, stones: List[List[int]]) -> int:
        n = len(stones)
        adj = [[] for _ in range(n)]
        
        # Build the graph
        for i in range(n):
            for j in range(i + 1, n):
                if stones[i][0] == stones[j][0] or stones[i][1] == stones[j][1]:
                    adj[i].append(j)
                    adj[j].append(i)
        
        visited = set()
        numComponents = 0

        # Find the number of connected components
        for i in range(n):
            if i not in visited:
                self.dfs(i, adj, visited)
                numComponents += 1

        return n - numComponents
