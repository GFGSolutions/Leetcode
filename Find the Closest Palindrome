// User Template For Java

class Solution {
  public String nearestPalindromic(String numberStr) {
    long number = Long.parseLong(numberStr);
    if (number <= 10) return String.valueOf(number - 1);
    if (number == 11) return "9";
    int length = numberStr.length();
    long leftHalf = Long.parseLong(numberStr.substring(0, (length + 1) / 2));
    long[] palindromeCandidates = new long[5];
    palindromeCandidates[0] = generatePalindromeFromLeft(leftHalf - 1, length % 2 == 0);
    palindromeCandidates[1] = generatePalindromeFromLeft(leftHalf, length % 2 == 0);
    palindromeCandidates[2] = generatePalindromeFromLeft(leftHalf + 1, length % 2 == 0);
    palindromeCandidates[3] = (long)Math.pow(10, length - 1) - 1;
    palindromeCandidates[4] = (long)Math.pow(10, length) + 1;
    long nearestPalindrome = 0;
    long minDifference = Long.MAX_VALUE;
    for (long candidate : palindromeCandidates) {
      if (candidate == number) continue;
      long difference = Math.abs(candidate - number);
      if (difference < minDifference || (difference == minDifference && candidate < nearestPalindrome)) {
        minDifference = difference;
        nearestPalindrome = candidate;
      }
    }
    return String.valueOf(nearestPalindrome);
  }
  private long generatePalindromeFromLeft(long leftHalf, boolean isEvenLength) {
    long palindrome = leftHalf;
    if (!isEvenLength) leftHalf /= 10;
    while (leftHalf > 0) {
      palindrome = palindrome * 10 + leftHalf % 10;
      leftHalf /= 10;
    }
    return palindrome;
  }
}





// User Template For C++
class Solution {
public:
    string nearestPalindromic(string numberStr) {
        long long number = stoll(numberStr);
        if (number <= 10) return to_string(number - 1);
        if (number == 11) return "9";

        int length = numberStr.length();
        long long leftHalf = stoll(numberStr.substr(0, (length + 1) / 2));
        
        vector<long long> palindromeCandidates(5);
        palindromeCandidates[0] = generatePalindromeFromLeft(leftHalf - 1, length % 2 == 0);
        palindromeCandidates[1] = generatePalindromeFromLeft(leftHalf, length % 2 == 0);
        palindromeCandidates[2] = generatePalindromeFromLeft(leftHalf + 1, length % 2 == 0);
        palindromeCandidates[3] = pow(10, length - 1) - 1;
        palindromeCandidates[4] = pow(10, length) + 1;

        long long nearestPalindrome = 0;
        long long minDifference = LLONG_MAX;

        for (long long candidate : palindromeCandidates) {
            if (candidate == number) continue;
            long long difference = abs(candidate - number);
            if (difference < minDifference || (difference == minDifference && candidate < nearestPalindrome)) {
                minDifference = difference;
                nearestPalindrome = candidate;
            }
        }

        return to_string(nearestPalindrome);
    }

private:
    long long generatePalindromeFromLeft(long long leftHalf, bool isEvenLength) {
        long long palindrome = leftHalf;
        if (!isEvenLength) leftHalf /= 10;
        while (leftHalf > 0) {
            palindrome = palindrome * 10 + leftHalf % 10;
            leftHalf /= 10;
        }
        return palindrome;
    }
};


//https://leetcode.com/problems/find-the-closest-palindrome/submissions/1364985439/





// User Template For Python
class Solution:
    def nearestPalindromic(self, numberStr: str) -> str:
        number = int(numberStr)
        if number <= 10:
            return str(number - 1)
        if number == 11:
            return "9"

        length = len(numberStr)
        leftHalf = int(numberStr[:(length + 1) // 2])
        
        palindromeCandidates = [
            self.generatePalindromeFromLeft(leftHalf - 1, length % 2 == 0),
            self.generatePalindromeFromLeft(leftHalf, length % 2 == 0),
            self.generatePalindromeFromLeft(leftHalf + 1, length % 2 == 0),
            10**(length - 1) - 1,
            10**length + 1
        ]

        nearestPalindrome = 0
        minDifference = float('inf')

        for candidate in palindromeCandidates:
            if candidate == number:
                continue
            difference = abs(candidate - number)
            if difference < minDifference or (difference == minDifference and candidate < nearestPalindrome):
                minDifference = difference
                nearestPalindrome = candidate

        return str(nearestPalindrome)

    def generatePalindromeFromLeft(self, leftHalf: int, isEvenLength: bool) -> int:
        palindrome = leftHalf
        if not isEvenLength:
            leftHalf //= 10
        while leftHalf > 0:
            palindrome = palindrome * 10 + leftHalf % 10
            leftHalf //= 10
        return palindrome


#https://leetcode.com/problems/find-the-closest-palindrome/submissions/1365095966/
