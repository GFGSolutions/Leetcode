// User Template For Java

class Solution {
  public int[][] restoreMatrix(int[] rowSum, int[] colSum) {
    int numrows = rowSum.length;
    int colrows = colSum.length;
    int[][] result = new int[numrows][colrows];
    int i=0,j=0;
    while(i<numrows && j<colrows){
      int val = Math.min(rowSum[i], colSum[j]);
      result[i][j] = val;
      rowSum[i] -= val;
      colSum[j] -= val;
      if(rowSum[i] == 0){
        i++;
      }
      if(colSum[j] == 0){
        j++;
      }
    }
    return result;
  }
}




// User Template For C++
class Solution {
public:
    vector<vector<int>> restoreMatrix(vector<int>& rowSum, vector<int>& colSum) {
        int numRows = rowSum.size();
        int numCols = colSum.size();
        vector<vector<int>> result(numRows, vector<int>(numCols, 0));

        int i = 0, j = 0;

        while (i < numRows && j < numCols) {
            int val = min(rowSum[i], colSum[j]);
            result[i][j] = val;
            rowSum[i] -= val;
            colSum[j] -= val;

            if (rowSum[i] == 0) {
                i++;
            }
            if (colSum[j] == 0) {
                j++;
            }
        }
        return result;
    }
};






// User Template For Python
class Solution(object):
    def restoreMatrix(self, rowSum, colSum):
        numRows = len(rowSum)
        numCols = len(colSum)
        result = [[0] * numCols for _ in range(numRows)]

        i, j = 0, 0

        while i < numRows and j < numCols:
            val = min(rowSum[i], colSum[j])
            result[i][j] = val
            rowSum[i] -= val
            colSum[j] -= val

            if rowSum[i] == 0:
                i += 1
            if colSum[j] == 0:
                j += 1
        
        return result
        
