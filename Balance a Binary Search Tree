// User Template For Java
class Solution {
  private List<TreeNode> sortedArr = new ArrayList<>();
  public TreeNode balanceBST(TreeNode root) {
    inorderTraverse(root);
    return sortedArrayToBST(0, sortedArr.size() - 1);
  }
  private void inorderTraverse(TreeNode root) {
    if (root == null) return;
    inorderTraverse(root.left);
    sortedArr.add(root);
    inorderTraverse(root.right);
  }
  private TreeNode sortedArrayToBST(int start, int end) {
    if (start > end) return null;
    int mid = (start + end) / 2;
    TreeNode root = sortedArr.get(mid);
    root.left = sortedArrayToBST(start, mid - 1);
    root.right = sortedArrayToBST(mid + 1, end);
    return root;
  }
}



// User Template For C++
class Solution {
public:
    vector<TreeNode*> sortedArr;
    TreeNode* balanceBST(TreeNode* root) {
        inorderTraverse(root);
        return sortedArrayToBST(0, sortedArr.size() - 1);
    }
    void inorderTraverse(TreeNode* root) {
        if (root == NULL) return;
        inorderTraverse(root->left);
        sortedArr.push_back(root);
        inorderTraverse(root->right);
    }
    TreeNode* sortedArrayToBST(int start, int end) {
        if (start > end) return NULL;
        int mid = (start + end) / 2;
        TreeNode* root = sortedArr[mid];
        root->left = sortedArrayToBST(start, mid - 1);
        root->right = sortedArrayToBST(mid + 1, end);
        return root;
    }
};



// User Template For Python3
class Solution:
    def balanceBST(self, root: TreeNode) -> TreeNode:
        self.sortedArr = []
        self.inorderTraverse(root)
        return self.sortedArrayToBST(0, len(self.sortedArr) - 1)

    def inorderTraverse(self, root: TreeNode) -> None:
        if not root:
            return
        self.inorderTraverse(root.left)
        self.sortedArr.append(root)
        self.inorderTraverse(root.right)

    def sortedArrayToBST(self, start: int, end: int) -> TreeNode:
        if start > end:
            return None
        mid = (start + end) // 2
        root = self.sortedArr[mid]
        root.left = self.sortedArrayToBST(start, mid - 1)
        root.right = self.sortedArrayToBST(mid + 1, end)
        return root
