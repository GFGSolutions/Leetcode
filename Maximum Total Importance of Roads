// User Template For Java

import java.util.*;
class Solution {
  public long maximumImportance(int n, int[][] roads) {
    int[] degree = new int[n];
    for (int[] road : roads) {
      degree[road[0]]++;
      degree[road[1]]++;
    }
    Integer[] cities = new Integer[n];
    for (int i = 0; i < n; i++) {
      cities[i] = i;
    }
    Arrays.sort(cities, new Comparator<Integer>() {
      public int compare(Integer a, Integer b) {
        return Integer.compare(degree[b], degree[a]);
      }
    });
    long totalImportance = 0;
    for (int i = 0; i < n; i++) {
      totalImportance += (long) (n - i) * degree[cities[i]];
    }
    return totalImportance;
  }
}



// User Template For C++
class Solution {
public:
    long long maximumImportance(int n, vector<vector<int>>& roads) {
        vector<int> degree(n, 0); // Array to store the degree of each city
        
        // Calculate the degree of each city
        for (const auto& road : roads) {
            degree[road[0]]++;
            degree[road[1]]++;
        }
        
        // Create a list of cities and sort by degree
        vector<int> cities(n);
        for (int i = 0; i < n; i++) {
            cities[i] = i;
        }
        sort(cities.begin(), cities.end(), [&](int a, int b) {
            return degree[a] > degree[b];
        });
        
        // Assign values to cities starting from the highest degree
        long long totalImportance = 0;
        for (int i = 0; i < n; i++) {
            totalImportance += (long long)(n - i) * degree[cities[i]];
        }
        
        return totalImportance;
    }
};



// User Template For Python
class Solution(object):
    def maximumImportance(self, n, roads):
        degree = [0] * n
        
        # Calculate the degree of each city
        for road in roads:
            degree[road[0]] += 1
            degree[road[1]] += 1
        
        # Create a list of cities and sort by degree
        cities = list(range(n))
        cities.sort(key=lambda x: -degree[x])
        
        # Assign values to cities starting from the highest degree
        total_importance = 0
        for i in range(n):
            total_importance += (n - i) * degree[cities[i]]
        
        return total_importance
        
