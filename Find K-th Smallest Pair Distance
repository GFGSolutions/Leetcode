// User Template For Java

public class Solution {
  public int smallestDistancePair(int[] nums, int k) {
    Arrays.sort(nums);
    int left = 0;
    int right = nums[nums.length - 1] - nums[0];
    while (left < right) {
      int mid = (left + right) / 2;
      if (issmallpairs(nums, k, mid))
        right = mid;
      else
        left = mid + 1;
    }
    return left;
  }
  private boolean issmallpairs(int[] nums, int k, int mid) {
    int count = 0, left = 0;
    for (int right = 1; right < nums.length; right++) {
      while (nums[right] - nums[left] > mid) left++;
      count += right - left;
    }
    return (count >= k);
  }
}




// User Template For C++

class Solution {
public:
    int smallestDistancePair(std::vector<int>& nums, int k) {
        std::sort(nums.begin(), nums.end());
        
        int left = 0;
        int right = nums[nums.size() - 1] - nums[0];
        
        while (left < right) {
            int mid = (left + right) / 2;
            
            if (issmallpairs(nums, k, mid))
                right = mid;
            else
                left = mid + 1;
        }
        return left;
    }
    
private:
    bool issmallpairs(const std::vector<int>& nums, int k, int mid) {
        int count = 0, left = 0;
        for (int right = 1; right < nums.size(); right++) {
            while (nums[right] - nums[left] > mid) left++;
            count += right - left;
        }
        return (count >= k);
    }
};




// User Template For Python

class Solution:
    def smallestDistancePair(self, nums: List[int], k: int) -> int:
        nums.sort()
        
        left, right = 0, nums[-1] - nums[0]
        
        while left < right:
            mid = (left + right) // 2
            
            if self.issmallpairs(nums, k, mid):
                right = mid
            else:
                left = mid + 1
                
        return left
    
    def issmallpairs(self, nums: List[int], k: int, mid: int) -> bool:
        count = 0
        left = 0
        
        for right in range(1, len(nums)):
            while nums[right] - nums[left] > mid:
                left += 1
            count += right - left
            
        return count >= k
