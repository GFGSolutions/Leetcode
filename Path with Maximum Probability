// User Template For Java

class Solution {
  public double maxProbability(int n, int[][] edges, double[] succProb, int start_node, int end_node) {
    double[] maxProb = new double[n];
    maxProb[start_node] = 1.0;
    for (int i = 0; i < n - 1; i++) {
      boolean updated = false;
      for (int j = 0; j < edges.length; j++) {
        int u = edges[j][0];
        int v = edges[j][1];
        double prob = succProb[j];
        if (maxProb[u] * prob > maxProb[v]) {
          maxProb[v] = maxProb[u] * prob;
          updated = true;
        }
        if (maxProb[v] * prob > maxProb[u]) {
          maxProb[u] = maxProb[v] * prob;
          updated = true;
        }
      }
      if (!updated) break;
    }
    return maxProb[end_node];
  }
}






// User Template For C++
class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
        vector<double> maxProb(n, 0.0);
        maxProb[start_node] = 1.0;

        for (int i = 0; i < n - 1; ++i) {
            bool updated = false;
            for (int j = 0; j < edges.size(); ++j) {
                int u = edges[j][0];
                int v = edges[j][1];
                double prob = succProb[j];

                if (maxProb[u] * prob > maxProb[v]) {
                    maxProb[v] = maxProb[u] * prob;
                    updated = true;
                }
                if (maxProb[v] * prob > maxProb[u]) {
                    maxProb[u] = maxProb[v] * prob;
                    updated = true;
                }
            }
            if (!updated) break;
        }

        return maxProb[end_node];
    }
};




// User Template For Python
class Solution:
    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start: int, end: int) -> float:
        dist = [0] * n
        dist[start] = 1
        
        for _ in range(n - 1):
            updated = False
            for i, (u, v) in enumerate(edges):
                if dist[u] * succProb[i] > dist[v]:
                    dist[v] = dist[u] * succProb[i]
                    updated = True
                if dist[v] * succProb[i] > dist[u]:
                    dist[u] = dist[v] * succProb[i]
                    updated = True
            if not updated:
                break
        
        return dist[end]
