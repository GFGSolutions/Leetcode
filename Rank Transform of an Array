// User Template For Java

import java.util.*;
class Solution {
  public int[] arrayRankTransform(int[] arr) {
    Map<Integer, Integer> valueToRank = new HashMap<>(); 
    int[] sortedUniqueNumbers = Arrays.stream(arr).distinct().sorted().toArray(); 
    for (int i = 0; i < sortedUniqueNumbers.length; i++) {
      valueToRank.put(sortedUniqueNumbers[i], i + 1);
    }
    for (int i = 0; i < arr.length; i++) {
      arr[i] = valueToRank.get(arr[i]);
    }
    return arr; 
  }
}



// User Template For C++
class Solution {
public:
    std::vector<int> arrayRankTransform(std::vector<int>& arr) {
        std::unordered_map<int, int> valueToRank;  // Map to store value-to-rank mapping
        std::vector<int> sortedUniqueNumbers = arr; 
        
        // Remove duplicates and sort
        std::sort(sortedUniqueNumbers.begin(), sortedUniqueNumbers.end());
        sortedUniqueNumbers.erase(std::unique(sortedUniqueNumbers.begin(), sortedUniqueNumbers.end()), sortedUniqueNumbers.end());
        
        // Assign ranks to sorted unique elements
        for (int i = 0; i < sortedUniqueNumbers.size(); i++) {
            valueToRank[sortedUniqueNumbers[i]] = i + 1;
        }

        // Replace each element in the original array with its rank
        for (int i = 0; i < arr.size(); i++) {
            arr[i] = valueToRank[arr[i]];
        }

        return arr;  // Return the updated array
    }
};





// User Template For Python3
class Solution:
    def arrayRankTransform(self, arr: List[int]) -> List[int]:
        value_to_rank = {}  # Dictionary to store value-to-rank mapping
        sorted_unique_numbers = sorted(list(set(arr)))  # Remove duplicates and sort unique elements
        
        # Assign ranks to sorted unique elements
        for index in range(len(sorted_unique_numbers)): 
            value_to_rank[sorted_unique_numbers[index]] = index + 1
          
        # Replace each element in the original array with its rank
        for index in range(len(arr)): 
            arr[index] = value_to_rank[arr[index]]
        
        return arr  # Return the updated array
