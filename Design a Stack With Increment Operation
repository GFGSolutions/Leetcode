// User Template For Java

class CustomStack {
  private int n;
  private Stack<Integer> stack;
  private List<Integer> inc;
  public CustomStack(int n) {
    this.n = n;
    this.stack = new Stack<>();
    this.inc = new ArrayList<>();
  }
  public void push(int x) {
    if (stack.size() < n) {
      stack.push(x);
      inc.add(0);
    }
  }
  public int pop() {
    if (stack.isEmpty()) return -1;
    if (inc.size() > 1) inc.set(inc.size() - 2, inc.get(inc.size() - 2) + inc.get(inc.size() - 1));
    return stack.pop() + inc.remove(inc.size() - 1);
  }
  public void increment(int k, int val) {
    if (!stack.isEmpty()) {
      int index = Math.min(k, inc.size()) - 1;
      inc.set(index, inc.get(index) + val);
    }
  }
}






// User Template For C++
class CustomStack {
public:
    int n;
    stack<int> stack;
    vector<int> inc;

    CustomStack(int n) {
        this->n = n;
    }

    void push(int x) {
        if (stack.size() < n) {
            stack.push(x);
            inc.push_back(0);
        }
    }

    int pop() {
        if (stack.empty()) return -1;
        if (inc.size() > 1) inc[inc.size() - 2] += inc.back();
        int res = stack.top() + inc.back();
        stack.pop();
        inc.pop_back();
        return res;
    }

    void increment(int k, int val) {
        if (!stack.empty()) {
            int idx = min(k, (int)inc.size()) - 1;
            inc[idx] += val;
        }
    }
};





// User Template For Python3
class CustomStack:

    def __init__(self, n: int):
        self.n, self.stack, self.inc = n, [], []

    def push(self, x: int) -> None:
        if len(self.stack) < self.n: self.stack.append(x), self.inc.append(0)

    def pop(self) -> int:
        if not self.stack: return -1
        if len(self.inc) > 1: self.inc[-2] += self.inc[-1]
        return self.stack.pop() + self.inc.pop()

    def increment(self, k: int, val: int) -> None:
        if self.inc: self.inc[min(k, len(self.inc)) - 1] += val
