// User Template For Java

class Solution {
  public boolean isSubPath(ListNode head, TreeNode root) {
    return dfs(head, head, root);
  }
  boolean dfs(ListNode head, ListNode cur, TreeNode root) {
    if (cur == null) return true;
    if (root == null) return false;
    if (cur.val == root.val) cur = cur.next;
    else if (head.val == root.val) head = head.next;
    else cur = head;
    return dfs(head, cur, root.left) || dfs(head, cur, root.right);
  }
}




// User Template For C++
class Solution {
public:
    bool isSubPath(ListNode* head, TreeNode* root) {
        return dfs(head, head, root);
    }
    
    bool dfs(ListNode* head, ListNode* cur, TreeNode* root) {
        if (cur == nullptr) return true;
        if (root == nullptr) return false;
        
        if (cur->val == root->val) {
            cur = cur->next;
        } else if (head->val == root->val) {
            head = head->next;
        } else {
            cur = head;
        }
        
        return dfs(head, cur, root->left) || dfs(head, cur, root->right);
    }
};





// User Template For Python
class Solution:
    def isSubPath(self, head, root):
        return self.dfs(head, head, root)
    def dfs(self, head, cur, root):
        if cur is None:
            return True
        if root is None:
            return False
        if cur.val == root.val:
            cur = cur.next
        elif head.val == root.val:
            head = head.next
        else:
            cur = head
        return self.dfs(head, cur, root.left) or self.dfs(head, cur, root.right)
