// User Template For Java

class Solution {
  public List<List<Integer>> getAncestors(int n, int[][] edges) {
  List<List<Integer>> ans = new ArrayList();
  List<List<Integer>> dc = new ArrayList();
  for (int i = 0; i < n; i++) {
    ans.add(new ArrayList());
    dc.add(new ArrayList());
  }
  for (int[] e: edges) 
    dc.get(e[0]).add(e[1]);
  for (int i = 0; i < n; i++) 
    dfs(i, i, ans, dc);
  return ans;
}
private void dfs(int x, int curr, List<List<Integer>> ans, List<List<Integer>> dc) {
  for (int ch: dc.get(curr))
    if(ans.get(ch).size() == 0 || ans.get(ch).get(ans.get(ch).size() - 1) != x) {
      ans.get(ch).add(x);
      dfs(x, ch, ans, dc);
    }
  }
}



// User Template For C++
class Solution {
public:
    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        vector<vector<int>> ans(n), directChild(n);
        for (auto& e : edges) {
            directChild[e[0]].push_back(e[1]);
        }
        for (int i = 0; i < n; i++) {
            dfs(i, i, ans, directChild);
        }
        return ans;
    }

private:
    void dfs(int x, int curr, vector<vector<int>>& ans, vector<vector<int>>& directChild) {
        for (int ch : directChild[curr]) {
            if (ans[ch].empty() || ans[ch].back() != x) {
                ans[ch].push_back(x);
                dfs(x, ch, ans, directChild);
            }
        }
    }
};



// User Template For Python3
class Solution:
    def getAncestors(self, n: int, edges: List[List[int]]) -> List[List[int]]:
        ans = [[] for _ in range(n)]
        directChild = [[] for _ in range(n)]
        for e in edges:
            directChild[e[0]].append(e[1])
        for i in range(n):
            self.dfs(i, i, ans, directChild)
        return ans

    def dfs(self, x: int, curr: int, ans: List[List[int]], directChild: List[List[int]]) -> None:
        for ch in directChild[curr]:
            if not ans[ch] or ans[ch][-1] != x:
                ans[ch].append(x)
                self.dfs(x, ch, ans, directChild)
