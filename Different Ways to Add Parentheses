// User Template For Java

import java.util.*;
class Solution {
  public List<Integer> diffWaysToCompute(String expression) {
    List<Integer> res = new ArrayList<>();
    for (int i = 0; i < expression.length(); ++i) {
      char oper = expression.charAt(i);
      if (oper == '+' || oper == '-' || oper == '*') {
        List<Integer> s1 = diffWaysToCompute(expression.substring(0, i));
        List<Integer> s2 = diffWaysToCompute(expression.substring(i + 1));
        for (int a : s1) {
          for (int b : s2) {
            if (oper == '+') res.add(a + b);
            else if (oper == '-') res.add(a - b);
            else if (oper == '*') res.add(a * b);
          }
        }
      }
    }
    if (res.isEmpty()) res.add(Integer.parseInt(expression));
    return res;
  }
}





// User Template For C++
class Solution {
public:
    vector<int> diffWaysToCompute(string expression) {
        vector<int> res;
        for (int i = 0; i < expression.size(); ++i) {
            char oper = expression[i];
            if (oper == '+' || oper == '-' || oper == '*') {
                vector<int> s1 = diffWaysToCompute(expression.substr(0, i));
                vector<int> s2 = diffWaysToCompute(expression.substr(i + 1));
                for (int a : s1) {
                    for (int b : s2) {
                        if (oper == '+') res.push_back(a + b);
                        else if (oper == '-') res.push_back(a - b);
                        else if (oper == '*') res.push_back(a * b);
                    }
                }
            }
        }
        if (res.empty()) res.push_back(stoi(expression));
        return res;
    }
};







// User Template For python3
class Solution:
    def diffWaysToCompute(self, expression: str) -> List[int]:
        res = []
        # ans = []
        for i in range(len(expression)):
            oper = expression[i]
            if oper == "+" or oper == "-" or oper == "*":
                sub_str1 = expression[0 : i]
                sub_str2 = expression[i + 1 : ]
                s1 = self.diffWaysToCompute(sub_str1)
                s2 = self.diffWaysToCompute(sub_str2)
                for i in s1:
                    for j in s2:
                        if oper == "*":
                            res.append(int(i) * int(j))
                        if oper == "+":
                            res.append(int(i) + int(j))
                        if oper == "-":
                            res.append(int(i) - int(j))
        if len(res) == 0:
            res.append(int(expression))
        # print(res)
        return res
