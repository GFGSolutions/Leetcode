// User Template For Java

class Solution {
  public int minBitFlips(int start, int goal) {
    int count = 0; 
    int xor = start ^ goal; 
    while(xor!=0){
      count += xor & 1; 
      xor >>=1; 
    }
    return count;
  }
}




// User Template For C++
class Solution {
public:
    int minBitFlips(int start, int goal) {
        int xorResult = start ^ goal;  // XOR to find differing bits
        int count = 0;
        
        // Count the number of 1's in the XOR result
        while (xorResult > 0) {
            count += xorResult & 1;  // Check if the least significant bit is 1
            xorResult >>= 1;         // Right shift to check the next bit
        }
        
        return count;
    }
};






// User Template For Python
class Solution(object):
    def minBitFlips(self, start, goal):
        """
        :type start: int
        :type goal: int
        :rtype: int
        """
        # XOR to find differing bits between start and goal
        xor_result = start ^ goal
        count = 0
        
        # Count the number of 1's in the XOR result
        while xor_result > 0:
            count += xor_result & 1  # Check if the least significant bit is 1
            xor_result >>= 1         # Right shift to check the next bit
        
        return count
