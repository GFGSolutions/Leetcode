// User Template For Java

class Solution {
  public TreeNode createBinaryTree(int[][] descriptions) {
    TreeNode[] map = new TreeNode[100001];
    boolean[] child = new boolean[100001];
    for (int[] d : descriptions){
      if (map[d[0]] == null) map[d[0]] = new TreeNode(d[0]);
      TreeNode node = (map[d[1]] == null ? new TreeNode(d[1]) : map[d[1]]);
      if (d[2] == 1) map[d[0]].left = node;
      else map[d[0]].right = node;
      map[node.val] = node;
      child[d[1]] = true;
    }
    for (int[] d : descriptions)
      if (!child[d[0]])
        return map[d[0]];
    return null;
  }
}





// User Template For C++
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
        TreeNode* map[100001] = {};
        bool child[100001] = {};
        for (auto& d : descriptions){
            if (map[d[0]] == nullptr) map[d[0]] = new TreeNode(d[0]);
            TreeNode* node = (map[d[1]] == nullptr ? new TreeNode(d[1]) : map[d[1]]);
            if (d[2])
                map[d[0]]->left = node;
            else
                map[d[0]]->right = node;
            map[node->val] = node;
            child[d[1]] = true;
        }
        for (auto& d : descriptions)
            if (!child[d[0]])
                return map[d[0]];
        return nullptr;
    }
};




// User Template For Python
class Solution:
    def createBinaryTree(self, descriptions: List[List[int]]) -> Optional[TreeNode]:
        child = set()
        nodes = {}
        for p, c, left in  descriptions:
            if p not in nodes:
                nodes[p] = TreeNode(p)
            if c not in nodes:
                nodes[c] = TreeNode(c)
            if left:
                nodes[p].left = nodes[c]
            else:
                nodes[p].right = nodes[c]
            child.add(c)
        for d in descriptions:
            if d[0] not in child:
                return nodes[d[0]]
        return None
