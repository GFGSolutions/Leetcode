// User Template For Java

class Solution {
  public int stoneGameII(int[] piles) {
    int n = piles.length;  
    int[][] dp = new int[n][n + 1];
    int[] suffixSum = new int[n];
    suffixSum[n - 1] = piles[n - 1];
    for (int i = n - 2; i >= 0; i--) {
      suffixSum[i] = suffixSum[i + 1] + piles[i];
    }
    for (int i = n - 1; i >= 0; i--) {
      for (int m = 1; m <= n; m++) {
        if (i + 2 * m >= n) {
          dp[i][m] = suffixSum[i];
        } else {
          for (int x = 1; x <= 2 * m; x++) {
            dp[i][m] = Math.max(dp[i][m], suffixSum[i] - dp[i + x][Math.max(m, x)]);
          }
        }
      }
    }
    return dp[0][1];
  }
}





// User Template For C++
class Solution {
public:
    int stoneGameII(vector<int>& piles) {
        int n = piles.size();
        
        vector<vector<int>> dp(n, vector<int>(n + 1, 0));
        vector<int> suffixSum(n, 0);
        suffixSum[n - 1] = piles[n - 1];
        
        for (int i = n - 2; i >= 0; i--) {
            suffixSum[i] = suffixSum[i + 1] + piles[i];
        }
        
        for (int i = n - 1; i >= 0; i--) {
            for (int m = 1; m <= n; m++) {
                if (i + 2 * m >= n) {
                    dp[i][m] = suffixSum[i];
                } else {
                    for (int x = 1; x <= 2 * m; x++) {
                        dp[i][m] = max(dp[i][m], suffixSum[i] - dp[i + x][max(m, x)]);
                    }
                }
            }
        }
        
        return dp[0][1];
    }
};





// User Template For Python
class Solution:
    def stoneGameII(self, piles: List[int]) -> int:
        n = len(piles)
        
        dp = [[0] * (n + 1) for _ in range(n)]
        suffix_sum = [0] * n
        suffix_sum[-1] = piles[-1]
        
        for i in range(n - 2, -1, -1):
            suffix_sum[i] = suffix_sum[i + 1] + piles[i]
        
        for i in range(n - 1, -1, -1):
            for m in range(1, n + 1):
                if i + 2 * m >= n:
                    dp[i][m] = suffix_sum[i]
                else:
                    for x in range(1, 2 * m + 1):
                        dp[i][m] = max(dp[i][m], suffix_sum[i] - dp[i + x][max(m, x)])
        
        return dp[0][1]
