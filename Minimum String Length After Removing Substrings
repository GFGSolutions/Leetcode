// User Template For Java

class Solution {
  public int minLength(String s) {
    Stack<Character> stack = new Stack<>();
    for (int i = 0; i < s.length(); i++) {
      char cur_char = s.charAt(i);
      if (stack.isEmpty()) {
        stack.push(cur_char);
        continue;
      }
      if (cur_char == 'B' && stack.peek() == 'A') {
        stack.pop();
      }
      else if (cur_char == 'D' && stack.peek() == 'C') {
        stack.pop();
      }
      else {
        stack.push(cur_char);
      }
    }
    return stack.size();
  }
}





// User Template For C++
class Solution {
public:
    int minLength(string s) {
        stack<char> stack;

        for (int i = 0; i < s.length(); i++) {
            char cur_char = s[i];

            if (stack.empty()) {
                stack.push(cur_char);
                continue;
            }

            if (cur_char == 'B' && stack.top() == 'A') {
                stack.pop();
            }
            else if (cur_char == 'D' && stack.top() == 'C') {
                stack.pop();
            }
            else {
                stack.push(cur_char);
            }
        }

        return stack.size();
    }
};





// User Template For Python3
class Solution:
    def minLength(self, s: str) -> int:
        stack = []
        for c in s:
            if not stack:
                stack.append(c)
                continue
            if c == "B" and stack[-1] == "A":
                stack.pop()
            elif c == "D" and stack[-1] == "C":
                stack.pop()
            else:
                stack.append(c)
        return len(stack)
