// User Template For Java

class Solution {
  public int[] sortArray(int[] nums) {
    int[] arr = new int[100001];
    int max = Integer.MIN_VALUE, min = Integer.MAX_VALUE;
    int x = 0;
    for (int i : nums) {
      x = 50000 + i;
      arr[x]++;
      if (min > x)
        min = x;
      if (max < x)
        max = x;
    }
    int k = nums.length - 1, n = k + 1;
    for (int i = max; i >= min; i--) {
      if (arr[i] == 0)
        continue;
      int len = arr[i];
      while (len-- > 0)
        nums[k--] = i - 50000;
    }
    return nums;
  }
}






// User Template For C++
#include <vector>
#include <functional> // For std::function

class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        // A lambda function for recursive quick sort
        std::function<void(int, int)> quickSort = [&](int left, int right) {
            // Base case: If the current segment is empty or a single element, no need to sort
            if (left >= right) {
                return;
            }

            // Initialize pointers for partitioning process
            int pivotIndex = left + (right - left) / 2; // Choose middle element as pivot
            int pivotValue = nums[pivotIndex];
            int i = left - 1;
            int j = right + 1;
          
            // Partition the array into two halves
            while (i < j) {
                // Increment i until nums[i] is greater or equal to pivot
                do {
                    i++;
                } while (nums[i] < pivotValue);

                // Decrement j until nums[j] is less or equal to pivot
                do {
                    j--;
                } while (nums[j] > pivotValue);

                // If i and j haven't crossed each other, swap the elements
                if (i < j) {
                    std::swap(nums[i], nums[j]);
                }
            }

            // Recursively apply the same logic to the left and right halves of the array
            quickSort(left, j);     // Apply quicksort to the left subarray
            quickSort(j + 1, right); // Apply quicksort to the right subarray
        };

        // Start the quick sort from the first to the last element
        quickSort(0, nums.size() - 1);

        // Return the sorted array
        return nums;
    }
};





// User Template For Python3
from random import randint
from typing import List

class Solution:
    def sortArray(self, nums: List[int]) -> List[int]:
        # Helper function to perform quick sort.
        def quick_sort(left, right):
            # Base case: If the current segment is empty or has only one element, no need to sort.
            if left >= right:
                return
          
            # Choose a random pivot element from the segment.
            pivot = nums[randint(left, right)]
            # Initialize pointers: 
            # 'less_than_pointer' marks the end of the segment with elements less than pivot.
            # 'greater_than_pointer' marks the start of the segment with elements greater than pivot.
            # 'current' is used to scan through the list. 
            less_than_pointer, greater_than_pointer, current = left - 1, right + 1, left
          
            # Iterate until 'current' is less than 'greater_than_pointer'.
            while current < greater_than_pointer:
                if nums[current] < pivot:
                    # Move the element to the segment with elements less than pivot.
                    less_than_pointer += 1
                    nums[less_than_pointer], nums[current] = nums[current], nums[less_than_pointer]
                    current += 1
                elif nums[current] > pivot:
                    # Move the element to the segment with elements greater than pivot.
                    greater_than_pointer -= 1
                    nums[greater_than_pointer], nums[current] = nums[current], nums[greater_than_pointer]
                else:
                    # If the current element is equal to the pivot, move to the next element.
                    current += 1

            # Recursively apply quick sort to the segment with elements less than pivot.
            quick_sort(left, less_than_pointer)
            # Recursively apply quick sort to the segment with elements greater than pivot.
            quick_sort(greater_than_pointer, right)

        # Call the quick_sort function with the initial boundaries of the list.
        quick_sort(0, len(nums) - 1)
        # Return the sorted list.
        return nums
