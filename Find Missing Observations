// User Template For Java

class Solution {
  public int[] missingRolls(int[] rolls, int mean, int n) {
    int m = rolls.length;
    int totalSum = mean * (n + m);
    int observedSum = 0; 
    for (int roll : rolls) {
      observedSum += roll; }
    int missingSum = totalSum - observedSum;
    if (missingSum < n || missingSum > 6 * n) {
      return new int[0]; }
    int base = missingSum / n;
    int remainder = missingSum % n;
    int[] result = new int[n];
    for (int i = 0; i < n; i++) {
      result[i] = base + (i < remainder ? 1 : 0); }
    return result;
  }
}





// User Template For Python
class Solution:
    def missingRolls(self, rolls, mean, n):
        m = len(rolls)
        total_sum = mean * (n + m)
        observed_sum = sum(rolls)
        
        missing_sum = total_sum - observed_sum
        
        if missing_sum < n or missing_sum > 6 * n:
            return []
        
        base = missing_sum // n
        remainder = missing_sum % n
        
        result = [base] * n
        for i in range(remainder):
            result[i] += 1
        
        return result





// User Template For C++
class Solution {
public:
    vector<int> missingRolls(vector<int>& rolls, int mean, int n) {
        ios::sync_with_stdio(false);
        cin.tie(nullptr);

        int nNumsSum = 0;
        for(int i : rolls) nNumsSum += i;

        int m=rolls.size();
        int totalLength = n+m;

        int mNumsSum = mean*totalLength - nNumsSum;     // formula to Find mean -> (nNumsSum + X) / (n+m) = mean
                                                        // So, X = mean * (n+m) - nNumsSum;

        if(n*6 < mNumsSum || mNumsSum<n) return {};     // for (n*6 < mNumsSum) see Constraints
        
        int rem = mNumsSum % n;
        int q   = mNumsSum / n;

        vector<int> res(n,q);
        for(int i=1; i<=rem; i++)
            res[i]++;

        return res;
    }
};

