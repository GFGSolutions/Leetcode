// User Template For Java
class Solution {
    int[] parent;
    int[] rank;
    int count;
    public int regionsBySlashes(String[] grid) {
        int rows = grid.length;
        int dots = rows+1;
        parent = new int[dots*dots];
        rank = new int[dots*dots];
        for (int i=0; i<parent.length; i++){
            parent[i] = i;
            rank[i] = 1;
        }
        
        for (int i=0; i<dots; i++){
            for (int j=0; j<dots; j++){
                if (i==0 || j==0 || i==rows || j==rows){
                    int cells = i * dots + j;
                    union(0, cells);
                }
            }
        }

        for (int i=0; i<rows; i++){
            char[] ch = grid[i].toCharArray();
            for (int j=0; j<ch.length; j++){
                if (ch[j] == '\\'){
                    int cell1 = i* dots+ j;
                    int cell2 = (i+1)*dots + (j+1);
                    union(cell1, cell2);
                } else if (ch[j] == '/'){
                    int cell1 = (i+1)*dots + j;
                    int cell2 = i*dots + (j+1);
                    union(cell1, cell2);
                }
            }
        }
        return count;
    }

    public void union(int a, int b){
        int parentA = find(a);
        int parentB = find(b);
        if (parentA == parentB){
            count++;
        } else {
            if (rank[parentA] > rank[parentB]){
                parent[parentB] = parentA;
            } else if (rank[parentA] < rank[parentB]){
                parent[parentA] = parentB;
            } else {
                parent[parentB] = parentA;
                rank[parentA]++;
            }
        }
    }

    public int find(int a){
        if(parent[a]==a)
            return a;
        int temp = find(parent[a]);
        parent[a] = temp;
        return temp;
    }

}





// User Template For Python

class Solution:
  def __init__(self):
    self.parent = []
    self.rank = []
    self.count = 0
  def regionsBySlashes(self, grid):
    n = len(grid)
    dots = n + 1
    self.parent = [i for i in range(dots * dots)]
    self.rank = [1] * (dots * dots)
    for i in range(dots):
      for j in range(dots):
        if i == 0 or j == 0 or i == n or j == n:
          cell = i * dots + j
          self.union(0, cell)
    for i in range(n):
      for j in range(n):
        if grid[i][j] == '\\':
          cell1 = i * dots + j
          cell2 = (i + 1) * dots + (j + 1)
          self.union(cell1, cell2)
        elif grid[i][j] == '/':
          cell1 = (i + 1) * dots + j
          cell2 = i * dots + (j + 1)
          self.union(cell1, cell2)
    return self.count
  def union(self, a, b):
    parentA = self.find(a)
    parentB = self.find(b)
    if parentA == parentB:
      self.count += 1
    else:
      if self.rank[parentA] > self.rank[parentB]:
        self.parent[parentB] = parentA
      elif self.rank[parentA] < self.rank[parentB]:
        self.parent[parentA] = parentB
      else:
        self.parent[parentB] = parentA
        self.rank[parentA] += 1
  def find(self, a):
    if self.parent[a] == a:
      return a
    self.parent[a] = self.find(self.parent[a])
    return self.parent[a]
