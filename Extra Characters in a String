// User Template For Java

import java.util.HashSet;
import java.util.Set;
class Solution {
  public int minExtraChar(String s, String[] dictionary) {
    Set<String> dict = new HashSet<>();
    for (String word : dictionary) {
      dict.add(word); }
    int n = s.length();
    int[] dp = new int[n + 1]; 
    for (int i = 0; i <= n; i++) {
      dp[i] = n; }
    dp[0] = 0; 
    for (int i = 1; i <= n; i++) {
      for (int j = 0; j < i; j++) {
        String sub = s.substring(j, i); 
        if (dict.contains(sub)) {
          dp[i] = Math.min(dp[i], dp[j]); 
        }
      }
      dp[i] = Math.min(dp[i], dp[i - 1] + 1); 
    }
    return dp[n];
  }
}





// User Template For C++
#include <iostream>
#include <vector>
#include <string>
#include <unordered_set>
using namespace std;

class Solution {
public:
    int minExtraChar(string s, vector<string>& dictionary) {
        unordered_set<string> dict(dictionary.begin(), dictionary.end()); // Set for O(1) lookup
        int n = s.size();
        vector<int> dp(n + 1, n); // DP array initialized with maximum extra characters
        
        dp[0] = 0; // No extra characters for an empty string
        
        // Iterate through each index in the string
        for (int i = 1; i <= n; i++) {
            // Try all possible substrings ending at i
            for (int j = 0; j < i; j++) {
                string sub = s.substr(j, i - j); // Get the substring s[j:i]
                if (dict.find(sub) != dict.end()) {
                    dp[i] = min(dp[i], dp[j]); // If substring is found in dictionary
                }
            }
            dp[i] = min(dp[i], dp[i - 1] + 1); // Consider the current character as extra
        }
        
        return dp[n]; // Result stored in dp[n]
    }
};




// User Template For Python
class Solution:
    def minExtraChar(self, s: str, dictionary: List[str]) -> int:
        dict_set = set(dictionary) # Store dictionary in a set for fast lookup
        n = len(s)
        dp = [n] * (n + 1) # DP array initialized with maximum extra characters
        dp[0] = 0 # No extra characters for an empty string

        # Iterate through each index in the string
        for i in range(1, n + 1):
            # Try all substrings ending at i
            for j in range(i):
                sub = s[j:i] # Get substring s[j:i]
                if sub in dict_set:
                    dp[i] = min(dp[i], dp[j]) # If substring found in dictionary
            dp[i] = min(dp[i], dp[i - 1] + 1) # Consider current character as extra

        return dp[n] # Return the result from dp[n]
