// User Template For Java

class Solution {
  public int strangePrinter(String s) {
    int n = s.length();
    char[] sChar = s.toCharArray();
    int[][] dp = new int[n][n];
    for(int[] in : dp) Arrays.fill(in, -1);
    return Util(0, n - 1, sChar, dp);
  }
  public int Util(int i, int j, char[] sChar, int[][] dp) {
    if (i > j) {
      return 0;
    }
    if(dp[i][j] != -1) return dp[i][j];
    
    int firstLetter = sChar[i];
    int answer = 1 + Util(i + 1, j, sChar, dp);
    for (int k = i + 1; k <= j; k++) {
      if (sChar[k] == firstLetter) {       
        int betterAnswer = Util(i, k - 1, sChar, dp) + Util(k + 1, j, sChar, dp);
        answer = Math.min(answer, betterAnswer);
      }
    }
    return dp[i][j] = answer;
  }
}






// User Template For C++
class Solution {
public:
    int strangePrinter(string s) {
        int n = s.length();
        vector<vector<int>> dp(n, vector<int>(n, -1));
        return Util(0, n - 1, s, dp);
    }

    int Util(int i, int j, const string& s, vector<vector<int>>& dp) {
        if (i > j) {
            return 0;
        }

        if (dp[i][j] != -1) return dp[i][j];

        char firstLetter = s[i];
        // If the current character is not repeated in the rest of the string
        int answer = 1 + Util(i + 1, j, s, dp);
        for (int k = i + 1; k <= j; k++) {
            // If repeated then update the answer
            if (s[k] == firstLetter) {
                // Splitting from i -> k - 1 (remove the last character)
                // and from k + 1 -> j             
                int betterAnswer = Util(i, k - 1, s, dp) + Util(k + 1, j, s, dp);
                answer = min(answer, betterAnswer);
            }
        }
        return dp[i][j] = answer;
    }
};





// User Template For Python3
class Solution:
    def strangePrinter(self, s: str) -> int:
        n = len(s)
        dp = [[-1] * n for _ in range(n)]
        return self.Util(0, n - 1, s, dp)

    def Util(self, i: int, j: int, s: str, dp: list) -> int:
        if i > j:
            return 0

        if dp[i][j] != -1:
            return dp[i][j]

        first_letter = s[i]
        # If the current character is not repeated in the rest of the string
        answer = 1 + self.Util(i + 1, j, s, dp)
        for k in range(i + 1, j + 1):
            # If repeated then update the answer
            if s[k] == first_letter:
                # Splitting from i -> k - 1 (remove the last character)
                # and from k + 1 -> j             
                better_answer = self.Util(i, k - 1, s, dp) + self.Util(k + 1, j, s, dp)
                answer = min(answer, better_answer)
        dp[i][j] = answer
        return answer
