// User Template For Java

class Solution {
  public boolean canBeEqual(int[] targetArray, int[] currentArray) {
    int n=targetArray.length;
    if (n!=currentArray.length) {
      return false;
    }
    int[] e=new int[1001];
    for (int i=0; i<n; i++) {
      e[targetArray[i]]++;
      e[currentArray[i]]--;
    }
    for (int c:e) {
      if (c!=0) {
        return false;
      }
    }
    return true;
  }
}





// User Template For C++
#include <vector>

class Solution {
public:
    bool canBeEqual(std::vector<int>& target, std::vector<int>& arr) {
        int n = target.size();
        if (n != arr.size()) {
            return false;
        }
        std::vector<int> count(1001);
        for (int i = 0; i < n; ++i) {
            ++count[target[i]];
            --count[arr[i]];
        }
        
        for (int c : count) {
            if (c != 0) {
                return false;
            }
        }
        
        return true;
    }
};




// User Template For Python
from collections import Counter

class Solution:
    def canBeEqual(self, target: List[int], arr: List[int]) -> bool:
        if len(target) != len(arr):
            return False
        
        count = Counter(target)
        for num in arr:
            count[num] -= 1
        
        return all(count[num] == 0 for num in count)
