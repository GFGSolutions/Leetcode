// User Template For Java

class Solution {
  public ListNode[] splitListToParts(ListNode head, int k) {
    ListNode[] ans = new ListNode[k];
    int size = 0;
    ListNode current = head;
    while (current != null) {
      size++;
      current = current.next;
    }
    int splitSize = size / k;
    int numRemainingParts = size % k;
    current = head;
    ListNode prev = current;
    for (int i = 0; i < k; i++) {
      ListNode newPart = current;
      int currentSize = splitSize;
      if (numRemainingParts > 0) {
        numRemainingParts--;
        currentSize++;
      }
      int j = 0;
      while (j < currentSize) {
        prev = current;
        current = current.next;
        j++;
      }
      if (prev != null) {
        prev.next = null;
      }
      ans[i] = newPart;
    }
    return ans;
  }
}






// User Template For C++
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        vector<ListNode*> ans(k);
        int size = 0;
        ListNode* current = head;
        while (current != nullptr) {
            size++;
            current = current->next;
        }
        int splitSize = size / k;
        int numRemainingParts = size % k;
        current = head;
        ListNode* prev = current;
        for (int i = 0; i < k; i++) {
            ListNode* newPart = current;
            int currentSize = splitSize;
            if (numRemainingParts > 0) {
                numRemainingParts--;
                currentSize++;
            }
            int j = 0;
            while (j < currentSize) {
                prev = current;
                if (current != nullptr) {
                    current = current->next;
                }
                j++;
            }
            if (prev != nullptr) {
                prev->next = nullptr;
            }
            ans[i] = newPart;
        }
        return ans;
    }
};





// User Template For Python
class Solution:
    def splitListToParts(self, head, k):
        ans = [None] * k
        size = 0
        current = head
        while current:
            size += 1
            current = current.next
        split_size = size // k
        remainder = size % k
        current = head
        for i in range(k):
            ans[i] = current
            current_size = split_size + (1 if remainder > 0 else 0)
            remainder -= 1
            for _ in range(current_size - 1):
                if current:
                    current = current.next
            if current:
                next_part = current.next
                current.next = None
                current = next_part
        return ans
