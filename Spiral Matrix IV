// User Template For Java

class Solution {
  public int[][] spiralMatrix(int rows, int columns, ListNode head) {
    int[][] matrix = new int[rows][];
    for (int i = 0; i < rows; i++) {
      matrix[i] = new int [columns];
      Arrays.fill(matrix[i], -1);
    }
    int topRow = 0, bottomRow = rows - 1, leftColumn = 0, rightColumn = columns - 1;
    while (head != null) {
      for (int col = leftColumn; col <= rightColumn && head != null; col++) {
        matrix[topRow][col] = head.val;
        head = head.next;
      }
      topRow++;
      for (int row = topRow; row <= bottomRow && head != null; row++) {
        matrix[row][rightColumn] = head.val;
        head = head.next;
      }
      rightColumn--;
      for (int col = rightColumn; col >= leftColumn && head != null; col--) {
        matrix[bottomRow][col] = head.val;
        head = head.next;
      }
      bottomRow--;
      for (int row = bottomRow; row >= topRow && head != null; row--) {
        matrix[row][leftColumn] = head.val;
        head = head.next;
      }
      leftColumn++;
    }
    return matrix;
  }
}




// User Template For C++
class Solution {
public:
    vector<vector<int>> spiralMatrix(int m, int n, ListNode* head) {
        vector<vector<int>> matrix(m, vector<int>(n, -1));
        
        int topRow = 0, bottomRow = m - 1, leftColumn = 0, rightColumn = n - 1;
        
        while (head) {
            // Fill top row
            for (int col = leftColumn; col <= rightColumn && head; ++col) {
                matrix[topRow][col] = head->val;
                head = head->next;
            }
            topRow++;
            
            // Fill right column
            for (int row = topRow; row <= bottomRow && head; ++row) {
                matrix[row][rightColumn] = head->val;
                head = head->next;
            }
            rightColumn--;
            
            // Fill bottom row
            for (int col = rightColumn; col >= leftColumn && head; --col) {
                matrix[bottomRow][col] = head->val;
                head = head->next;
            }
            bottomRow--;
            
            // Fill left column
            for (int row = bottomRow; row >= topRow && head; --row) {
                matrix[row][leftColumn] = head->val;
                head = head->next;
            }
            leftColumn++;
        }
        
        return matrix;
    }
};




// User Template For Python
class Solution(object):
    def spiralMatrix(self, m, n, head):
        matrix = [[-1] * n for _ in range(m)]
        
        topRow, bottomRow = 0, m - 1
        leftColumn, rightColumn = 0, n - 1
        
        while head:
            # Fill top row
            for col in range(leftColumn, rightColumn + 1):
                if not head:
                    break
                matrix[topRow][col] = head.val
                head = head.next
            topRow += 1
            
            # Fill right column
            for row in range(topRow, bottomRow + 1):
                if not head:
                    break
                matrix[row][rightColumn] = head.val
                head = head.next
            rightColumn -= 1
            
            # Fill bottom row
            for col in range(rightColumn, leftColumn - 1, -1):
                if not head:
                    break
                matrix[bottomRow][col] = head.val
                head = head.next
            bottomRow -= 1
            
            # Fill left column
            for row in range(bottomRow, topRow - 1, -1):
                if not head:
                    break
                matrix[row][leftColumn] = head.val
                head = head.next
            leftColumn += 1
        
        return matrix
